#!/usr/bin/env python3
"""
RemoteDroid Relay Server –¥–ª—è Railway
–°–æ–≤–º–µ—Å—Ç–∏–º —Å Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º RemoteDroid
"""

from flask import Flask, jsonify, request
from flask_socketio import SocketIO, emit, join_room, leave_room
from flask_cors import CORS
import uuid
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config['SECRET_KEY'] = 'remotedroid-secret-key'
CORS(app, origins="*")
socketio = SocketIO(app, cors_allowed_origins="*")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π
sessions = {}  # session_id -> {server_socket_id, client_socket_id, created_at, device_info}
server_sessions = {}  # server_socket_id -> session_id

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        "message": "RemoteDroid Relay Server",
        "status": "running",
        "version": "1.0.0",
        "endpoints": {
            "api_servers": "/api/servers",
            "api_session": "/api/session",
            "websocket": "/socket.io/"
        }
    })

@app.route('/api/servers')
def get_servers():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    available_servers = []
    
    for session_id, session in sessions.items():
        if session.get('server_socket_id') and not session.get('client_socket_id'):
            available_servers.append({
                'sessionId': session_id,
                'serverId': session.get('server_socket_id'),
                'createdAt': session.get('created_at', 0),
                'deviceInfo': session.get('device_info', 'Unknown Device')
            })
    
    return jsonify(available_servers)

@app.route('/api/session', methods=['POST'])
def create_session():
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
    session_id = str(uuid.uuid4())
    sessions[session_id] = {
        'server_socket_id': None,
        'client_socket_id': None,
        'created_at': int(time.time() * 1000),
        'device_info': None
    }
    
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {session_id}")
    return jsonify({'sessionId': session_id})

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        'status': 'healthy',
        'timestamp': int(time.time() * 1000),
        'active_sessions': len(sessions)
    })

# WebSocket —Å–æ–±—ã—Ç–∏—è
@socketio.on('connect')
def handle_connect():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    logger.info(f"–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {request.sid}")

@socketio.on('disconnect')
def handle_disconnect():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è"""
    logger.info(f"–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: {request.sid}")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π
    session_id = server_sessions.get(request.sid)
    if session_id and session_id in sessions:
        session = sessions[session_id]
        
        if session.get('server_socket_id') == request.sid:
            # –û—Ç–∫–ª—é—á–∏–ª—Å—è —Å–µ—Ä–≤–µ—Ä
            session['server_socket_id'] = None
            if session.get('client_socket_id'):
                emit('server-disconnected', room=session['client_socket_id'])
            logger.info(f"–°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω: {session_id}")
            
        elif session.get('client_socket_id') == request.sid:
            # –û—Ç–∫–ª—é—á–∏–ª—Å—è –∫–ª–∏–µ–Ω—Ç
            session['client_socket_id'] = None
            if session.get('server_socket_id'):
                emit('client-disconnected', room=session['server_socket_id'])
            logger.info(f"–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: {session_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –æ–±–∞ –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å
        if not session.get('server_socket_id') and not session.get('client_socket_id'):
            del sessions[session_id]
            logger.info(f"–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞: {session_id}")
    
    if session_id in server_sessions:
        del server_sessions[request.sid]

@socketio.on('register-server')
def handle_register_server(data):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    session_id = data.get('sessionId')
    device_info = data.get('deviceInfo', 'Unknown Device')
    
    if not session_id or session_id not in sessions:
        emit('error', {'message': '–ù–µ–≤–µ—Ä–Ω—ã–π session ID'})
        return
    
    session = sessions[session_id]
    if session.get('server_socket_id'):
        emit('error', {'message': '–°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏'})
        return
    
    session['server_socket_id'] = request.sid
    session['device_info'] = device_info
    server_sessions[request.sid] = session_id
    
    logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {session_id} ({request.sid})")
    emit('server-registered', {'sessionId': session_id})
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    socketio.emit('server-available', {
        'sessionId': session_id,
        'deviceInfo': device_info,
        'createdAt': session['created_at']
    })

@socketio.on('connect-client')
def handle_connect_client(data):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    session_id = data.get('sessionId')
    
    if not session_id or session_id not in sessions:
        emit('error', {'message': '–ù–µ–≤–µ—Ä–Ω—ã–π session ID'})
        return
    
    session = sessions[session_id]
    if not session.get('server_socket_id'):
        emit('error', {'message': '–°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω'})
        return
    
    if session.get('client_socket_id'):
        emit('error', {'message': '–ö–ª–∏–µ–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏'})
        return
    
    session['client_socket_id'] = request.sid
    
    logger.info(f"–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {session_id} ({request.sid})")
    emit('client-connected', {'sessionId': session_id})
    emit('client-connected', {'clientId': request.sid}, room=session['server_socket_id'])
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–Ω—è—Ç
    socketio.emit('server-busy', {'sessionId': session_id})

@socketio.on('server-data')
def handle_server_data(data):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É"""
    session_id = server_sessions.get(request.sid)
    if not session_id or session_id not in sessions:
        return
    
    session = sessions[session_id]
    if session.get('client_socket_id'):
        emit('server-data', data, room=session['client_socket_id'])

@socketio.on('client-data')
def handle_client_data(data):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
    session_id = server_sessions.get(request.sid)
    if not session_id or session_id not in sessions:
        return
    
    session = sessions[session_id]
    if session.get('server_socket_id'):
        emit('client-data', data, room=session['server_socket_id'])

@socketio.on('error')
def handle_error(data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {request.sid}: {data}")

if __name__ == '__main__':
    import os
    port = int(os.environ.get('PORT', 3000))
    logger.info(f"üöÄ RemoteDroid Relay Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info(f"üåê Railway URL: https://web-production-f8e27.up.railway.app")
    
    socketio.run(app, host='0.0.0.0', port=port, debug=False)
